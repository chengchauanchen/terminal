apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
Properties props = new Properties()
props.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    compileSdkVersion 28
    flavorDimensions "default"
    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        ndk {
            abiFilters "armeabi", "armeabi-v7a"
        }
    }

    signingConfigs {
        keystore {
            storeFile file(props['release.keystore'])
            keyAlias = props['keyAlias']
            keyPassword = props['keyPassword']
            storePassword = props['storePassword']
        }

    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true//去掉不用资源
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            signingConfig signingConfigs.keystore
        }
        debug {
            minifyEnabled false
            shrinkResources false//去掉不用资源
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            signingConfig signingConfigs.keystore
        }
    }

    productFlavors {
        common {}
        policeStore {}
        policeStoreOut {}
        xiangYang {}
        xiangYangPoliceStore {}
        teJing {}
        chuTianYun {}
        jiaXing {}
    }
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [apk_type: name]
    }
    //版本比较多时，自定义导出的APK名称，不同的渠道编出的APK的文件名应该是不一样的
    //Android插件3.0迁移指南所示：
    //用all()而不是each()
    //如果您只更改文件名（这是您的情况），请使用outputFileName而不是output.outputFile
    applicationVariants.all { variant ->
        variant.outputs.all() { output ->
            def flavor = variant.productFlavors[0]
            def fileName = "pad_${variant.flavorName}_${signTime()}_${variant.versionName}_${variant.versionCode}.apk"
            /*//默认打包方式，打包到app的子目录下
            outputFileName = fileName*/
            //修改打包路径，工程apkpackage文件夹下
            //也可以在打包时手动选择对应目录
            def des = output.packageApplication.outputDirectory.toPath().relativize(rootDir.toPath()).toFile()
            outputFileName = new File("$des/apkpackage", fileName)
        }
    }

    //用于支持lambda表达式
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

def signTime() {
    return new Date().format("MM-dd")
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]

    implementation 'android.arch.lifecycle:runtime:1.1.1'
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    implementation 'android.arch.lifecycle:reactivestreams:1.1.1'
    annotationProcessor "android.arch.lifecycle:compiler:1.1.1"

    api project(':SpecificSDK4GPTT')
    api project(':imageandfileselector')

    implementation 'skin.support:skin-support:2.2.3'
    // skin-support 基础控件支持
    implementation 'skin.support:skin-support-design:2.2.3'

    api project(':Common-Architecture')
}
